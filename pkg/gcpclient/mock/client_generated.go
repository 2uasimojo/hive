// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	gcpclient "github.com/openshift/hive/pkg/gcpclient"
	v1 "google.golang.org/api/dns/v1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListManagedZones mocks base method
func (m *MockClient) ListManagedZones(opts gcpclient.ListManagedZonesOptions) (*v1.ManagedZonesListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedZones", opts)
	ret0, _ := ret[0].(*v1.ManagedZonesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedZones indicates an expected call of ListManagedZones
func (mr *MockClientMockRecorder) ListManagedZones(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedZones", reflect.TypeOf((*MockClient)(nil).ListManagedZones), opts)
}

// ListResourceRecordSets mocks base method
func (m *MockClient) ListResourceRecordSets(managedZone string, opts gcpclient.ListResourceRecordSetsOptions) (*v1.ResourceRecordSetsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceRecordSets", managedZone, opts)
	ret0, _ := ret[0].(*v1.ResourceRecordSetsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceRecordSets indicates an expected call of ListResourceRecordSets
func (mr *MockClientMockRecorder) ListResourceRecordSets(managedZone, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceRecordSets", reflect.TypeOf((*MockClient)(nil).ListResourceRecordSets), managedZone, opts)
}

// AddResourceRecordSet mocks base method
func (m *MockClient) AddResourceRecordSet(managedZone string, recordSet *v1.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceRecordSet", managedZone, recordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResourceRecordSet indicates an expected call of AddResourceRecordSet
func (mr *MockClientMockRecorder) AddResourceRecordSet(managedZone, recordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceRecordSet", reflect.TypeOf((*MockClient)(nil).AddResourceRecordSet), managedZone, recordSet)
}

// DeleteResourceRecordSet mocks base method
func (m *MockClient) DeleteResourceRecordSet(managedZone string, recordSet *v1.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceRecordSet", managedZone, recordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceRecordSet indicates an expected call of DeleteResourceRecordSet
func (mr *MockClientMockRecorder) DeleteResourceRecordSet(managedZone, recordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRecordSet", reflect.TypeOf((*MockClient)(nil).DeleteResourceRecordSet), managedZone, recordSet)
}
