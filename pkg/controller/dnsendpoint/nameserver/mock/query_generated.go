// Code generated by MockGen. DO NOT EDIT.
// Source: ./query.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockQuery) CreateOrUpdate(rootDomain, domain string, values sets.Set[string]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", rootDomain, domain, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockQueryMockRecorder) CreateOrUpdate(rootDomain, domain, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockQuery)(nil).CreateOrUpdate), rootDomain, domain, values)
}

// Delete mocks base method.
func (m *MockQuery) Delete(rootDomain, domain string, values sets.Set[string]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rootDomain, domain, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueryMockRecorder) Delete(rootDomain, domain, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuery)(nil).Delete), rootDomain, domain, values)
}

// Get mocks base method.
func (m *MockQuery) Get(rootDomain string) (map[string]sets.Set[string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", rootDomain)
	ret0, _ := ret[0].(map[string]sets.Set[string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueryMockRecorder) Get(rootDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuery)(nil).Get), rootDomain)
}
